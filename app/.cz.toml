[tool.commitizen]
name = "cz_customize"
tag_format = "v${version}-app"
ignored_tag_formats = ["v${version}-*"]
version_scheme = "semver2"
version = "0.0.0"
version_provider = "uv"
version_files = [
    "pyproject.toml:version",
    "__version__.py",
]
update_changelog_on_bump = true
major_version_zero = true
bump_message = "bump: version $current_version → $new_version (app)"

[tool.commitizen.customize]
message_template = "{{prefix}}({{scope}}): {{subject}}\n\n{{body}}{% if is_breaking_change %}\nBREAKING CHANGE: {{footer}}{% endif %}"
example = "feature: this feature enables customization through a config file"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n(BREAKING CHANGE: <footer>)"
schema_pattern = "(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\\(\\S+\\))?!?:(\\s.*)"
bump_pattern = "^(?P<change_type>BREAKING[\\-\\ ]CHANGE|feat|fix|refactor|perf)(?P<scope>\\(app\\))?(?P<breaking>!)?:"
commit_parser = "^(?P<change_type>BREAKING[\\-\\ ]CHANGE|feat|fix|refactor|perf)(?P<scope>\\(app\\))?(?P<breaking>!)?:\\s(?P<message>.*)?"
changelog_pattern = "^(?P<change_type>BREAKING[\\-\\ ]CHANGE|feat|fix|refactor|perf)(?P<scope>\\(app\\))?(?P<breaking>!)?:"
change_type_map = {"feat" = "Features", "fix" = "Bug Fixes", "refactor" = "Code Refactor", "perf" = "Performance improvements"}
info = """
The commit contains the following structural elements, to communicate
intent to the consumers of your library:
fix: a commit of the type fix patches a bug in your codebase
(this correlates with PATCH in semantic versioning).
feat: a commit of the type feat introduces a new feature to the codebase
(this correlates with MINOR in semantic versioning).
BREAKING CHANGE: a commit that has the text BREAKING CHANGE: at the beginning of
its optional body or footer section introduces a breaking API change
(correlating with MAJOR in semantic versioning).
A BREAKING CHANGE can be part of commits of any type.
Others: commit types other than fix: and feat: are allowed,
like chore:, docs:, style:, refactor:, perf:, test:, and others.
We also recommend improvement for commits that improve a current
implementation without adding a new feature or fixing a bug.
Notice these types are not mandated by the conventional commits specification,
and have no implicit effect in semantic versioning (unless they include a BREAKING CHANGE).
A scope may be provided to a commit’s type, to provide additional contextual
information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays.
<type>[optional scope]: <description>
[optional body]
[optional footer]
"""

[[tool.commitizen.customize.questions]]
type = "list"
name = "prefix"
message = "Select the type of change you are committing"
choices = [
    {"value" = "fix", "name" = "fix: A bug fix. Correlates with PATCH in SemVer.", "key" = "x"},
    {"value" = "feat", "name" = "feat: A new feature. Correlates with MINOR in SemVer.", "key" = "f"},
    {"value" = "docs", "name" = "docs: Documentation only changes.", "key" = "d"},
    {"value" = "style", "name" = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.).", "key" = "s"},
    {"value" = "refactor", "name" = "refactor: A code change that neither fixes a bug, nor adds a feature.", "key" = "r"},
    {"value" = "perf", "name" = "perf: A code change that improves performance.", "key" = "p"},
    {"value" = "test", "name" = "test: Adding missing tests or correcting existing tests.", "key" = "t"},
    {"value" = "build", "name" = "build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm).", "key" = "b"},
    {"value" = "ci", "name" = "ci: Changes to CI configuration files and scripts (example scopes: GitHub Actions).", "key" = "c"},
    {"value" = "chore", "name" = "chore: Changes that are related to project maintenance, configuration or tooling."}
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (class or file name): (press [enter] to skip)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "Write a short and imperative summary of the code changes: (lower case and no period)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "body"
message = "Provide additional contextual information about the code changes: (press [enter] to skip)\n"
multiline = true

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "is_breaking_change"
message = "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"
default = false

[[tool.commitizen.customize.questions]]
type = "input"
name = "footer"
message = "Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)\n"
