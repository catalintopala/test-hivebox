name: Docker

on:
  workflow_call:
    inputs:
      dir:
        description: 'The directory where to run Docker'
        type: string
        required: true

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IS_PR: ${{ github.event_name == 'pull_request' }}

jobs:
  docker:
    name: docker
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      packages: write
      security-events: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: ${{ env.IS_PR == 'true' && '0' || '1' }}
          persist-credentials: false

      - name: Log in to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # "latest" tag is added automatically because "type=match" is used, as per docker/metadata-action docs
      - name: Extract metadata from Docker
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=match,pattern=v(\d.\d.\d),group=1
            type=match,pattern=v(\d.\d),group=1
            type=match,pattern=v(\d),group=1,enable=${{ contains(github.ref, inputs.dir == 'app' && 'app') == 'false' }}
            type=raw,value=pr,enable=${{ env.IS_PR == true }}

      - name: Display metadata
        run: |
          echo "Docker Tags: \"$TAGS\""
          echo "Image Labels: \"$LABELS\""
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Validate build configuration
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ inputs.dir == 'app' && 'app' }}
          call: check

      - name: Build ${{ env.IS_PR == 'false' && 'and push' || '' }} Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ inputs.dir == 'app' && 'app' }}
          load: ${{ env.IS_PR == 'true' }}
          push: ${{ env.IS_PR == 'false' }}
          platforms: ${{ env.IS_PR == 'false' && 'linux/amd64,linux/arm64' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          version: v0.67.0
          cache: true

      - name: Run Trivy vulnerability scanner for the Docker image
        if: env.IS_PR == 'true'
        uses: ./.github/actions/trivy
        with:
          scan-type: 'image'
          scan-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr'
          format: 'table'

      - name: Run Trivy vulnerability scanner for the Docker image
        if: env.IS_PR == 'false'
        uses: ./.github/actions/trivy
        with:
          scan-type: 'image'
          scan-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          upload-sarif: 'true'
